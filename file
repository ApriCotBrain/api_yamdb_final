============================= test session starts ==============================
platform darwin -- Python 3.9.15, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- /Users/evax/Documents/dev/edu/api_yamdb/venv/bin/python
django: settings: api_yamdb.settings (from ini)
rootdir: /Users/evax/Documents/dev/edu/api_yamdb, configfile: pytest.ini, testpaths: tests/
plugins: pythonpath-0.7.3, django-4.4.0
collecting ... collected 77 items

tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup PASSED [  1%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup PASSED [  2%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data0-messege0] PASSED [  3%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data1-messege1] PASSED [  5%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data2-messege2] PASSED [  6%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup FAILED [  7%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user FAILED [  9%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data0-messege0] PASSED [ 10%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data1-messege1] PASSED [ 11%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data2-messege2] PASSED [ 12%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data3-messege3] PASSED [ 14%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data4-messege4] PASSED [ 15%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data FAILED [ 16%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted PASSED [ 18%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted FAILED [ 19%]
tests/test_00_user_registration.py::Test00UserRegistration::test_get_new_confirmation_code_for_existing_user FAILED [ 20%]
tests/test_00_user_registration.py::Test00UserRegistration::test_get_confirmation_code_for_user_created_by_admin FAILED [ 22%]
tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated PASSED [ 23%]
tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated PASSED [ 24%]
tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated PASSED [ 25%]
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin PASSED    [ 27%]
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search PASSED [ 28%]
tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only PASSED [ 29%]
tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin_bad_requests PASSED [ 31%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_admin_user_creation[data0-] FAILED [ 32%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_admin_user_creation[data1-без указания роли нового пользователя ] FAILED [ 33%]
tests/test_01_users.py::Test01UserAPI::test_05_03_users_post_response_has_data FAILED [ 35%]
tests/test_01_users.py::Test01UserAPI::test_05_04_users_post_user_superuser FAILED [ 36%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin PASSED [ 37%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin PASSED [ 38%]
tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin PASSED [ 40%]
tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator PASSED [ 41%]
tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user 

=================================== FAILURES ===================================
____________ Test00UserRegistration.test_00_valid_data_user_signup _____________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x10c10fb20>
client = <django.test.client.Client object at 0x10c0f0ac0>
django_user_model = <class 'users.models.User'>

    def test_00_valid_data_user_signup(self, client, django_user_model):
        outbox_before_count = len(mail.outbox)
        valid_data = {
            'email': 'valid@yamdb.fake',
            'username': 'valid_username'
        }
    
        response = client.post(self.url_signup, data=valid_data)
        outbox_after = mail.outbox  # email outbox after user create
    
        assert response.status_code != HTTPStatus.NOT_FOUND, (
            f'Эндпоинт `{self.url_signup}` не найден. Проверьте настройки '
            'в *urls.py*.'
        )
    
>       assert response.status_code == HTTPStatus.OK, (
            'POST-запрос с корректными данными, отправленный на эндпоинт '
            f'`{self.url_signup}`, должен вернуть ответ со статусом 200.'
        )
E       AssertionError: POST-запрос с корректными данными, отправленный на эндпоинт `/api/v1/auth/signup/`, должен вернуть ответ со статусом 200.
E       assert 400 == <HTTPStatus.OK: 200>
E         +400
E         -<HTTPStatus.OK: 200>

tests/test_00_user_registration.py:120: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/signup/
_________ Test00UserRegistration.test_00_valid_data_admin_create_user __________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x10c116340>
admin_client = <rest_framework.test.APIClient object at 0x10c168730>
django_user_model = <class 'users.models.User'>

    def test_00_valid_data_admin_create_user(self,
                                             admin_client,
                                             django_user_model):
        outbox_before_count = len(mail.outbox)
        valid_data = {
            'email': 'valid@yamdb.fake',
            'username': 'valid_username'
        }
        response = admin_client.post(
            self.url_admin_create_user, data=valid_data
        )
        outbox_after = mail.outbox
    
        assert response.status_code != HTTPStatus.NOT_FOUND, (
            f'Эндпоинт `{self.url_admin_create_user}` не найден. Проверьте '
            'настройки в *urls.py*.'
        )
    
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос от имени администратора к эндпоинту '
            f'`{self.url_admin_create_user}` содержит корректные данные - '
            'должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос от имени администратора к эндпоинту `/api/v1/users/` содержит корректные данные - должен вернуться ответ со статусом 201.
E       assert 400 == <HTTPStatus.CREATED: 201>
E         +400
E         -<HTTPStatus.CREATED: 201>

tests/test_00_user_registration.py:169: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/users/
_________ Test00UserRegistration.test_00_obtain_jwt_token_invalid_data _________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x10c199a60>
client = <django.test.client.Client object at 0x10c1b4430>

    def test_00_obtain_jwt_token_invalid_data(self, client):
        response = client.post(self.url_token)
        assert response.status_code != HTTPStatus.NOT_FOUND, (
            f'Эндпоинт `{self.url_token}` не найдена. Проверьте настройки в '
            '*urls.py*.'
        )
    
        assert response.status_code == HTTPStatus.BAD_REQUEST, (
            'Проверьте, что POST-запрос без данных, отправленный на эндпоинт '
            f'`{self.url_token}`, возвращает ответ со статусом 400.'
        )
    
        invalid_data = {
            'confirmation_code': 12345
        }
        response = client.post(self.url_token, data=invalid_data)
        assert response.status_code == HTTPStatus.BAD_REQUEST, (
            'Проверьте, что POST-запрос, отправленный на эндпоинт '
            f'`{self.url_token}`и не содержащий информации о `username`, '
            'возвращает ответ со статусом 400.'
        )
    
        invalid_data = {
            'username': 'unexisting_user',
            'confirmation_code': 12345
        }
        response = client.post(self.url_token, data=invalid_data)
        assert response.status_code == HTTPStatus.NOT_FOUND, (
            'Проверьте, что POST-запрос с несуществующим `username`, '
            f'отправленный на эндпоинт `{self.url_token}`, возвращает ответ '
            'со статусом 404.'
        )
    
        valid_data = {
            'email': 'valid@yamdb.fake',
            'username': 'valid_username'
        }
        response = client.post(self.url_signup, data=valid_data)
>       assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что POST-запрос с корректными данными, отправленный '
            f'на `{self.url_signup}`, возвращает ответ со статусом 200.'
        )
E       AssertionError: Проверьте, что POST-запрос с корректными данными, отправленный на `/api/v1/auth/signup/`, возвращает ответ со статусом 200.
E       assert 400 == <HTTPStatus.OK: 200>
E         +400
E         -<HTTPStatus.OK: 200>

tests/test_00_user_registration.py:259: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/token/
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/token/
WARNING  django.request:log.py:224 Not Found: /api/v1/auth/token/
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/signup/
______ Test00UserRegistration.test_00_registration_same_email_restricted _______

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x10c1bf8b0>
client = <django.test.client.Client object at 0x10c1e61c0>

    def test_00_registration_same_email_restricted(self, client):
        valid_email_1 = 'test_duplicate_1@yamdb.fake'
        valid_email_2 = 'test_duplicate_2@yamdb.fake'
        valid_username_1 = 'valid_username_1'
        valid_username_2 = 'valid_username_2'
    
        valid_data = {
            'email': valid_email_1,
            'username': valid_username_1
        }
        response = client.post(self.url_signup, data=valid_data)
>       assert response.status_code == HTTPStatus.OK, (
            f'Проверьте, что POST-запрос к `{self.url_signup}` с корректными '
            'возвращает статус-код 200.'
        )
E       AssertionError: Проверьте, что POST-запрос к `/api/v1/auth/signup/` с корректными возвращает статус-код 200.
E       assert 400 == <HTTPStatus.OK: 200>
E         +400
E         -<HTTPStatus.OK: 200>

tests/test_00_user_registration.py:298: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/signup/
___ Test00UserRegistration.test_get_new_confirmation_code_for_existing_user ____

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x10c1bf580>
client = <django.test.client.Client object at 0x10c1dfdf0>

    def test_get_new_confirmation_code_for_existing_user(self, client):
        valid_data = {
            'email': 'test_email@yamdb.fake',
            'username': 'valid_username_1'
        }
        response = client.post(self.url_signup, data=valid_data)
>       assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что POST-запрос с корректными данными, отправленный '
            f'на эндпоинт `{self.url_signup}`, возвращает ответ со статусом '
            '200.'
        )
E       AssertionError: Проверьте, что POST-запрос с корректными данными, отправленный на эндпоинт `/api/v1/auth/signup/`, возвращает ответ со статусом 200.
E       assert 400 == <HTTPStatus.OK: 200>
E         +400
E         -<HTTPStatus.OK: 200>

tests/test_00_user_registration.py:342: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/signup/
_ Test00UserRegistration.test_get_confirmation_code_for_user_created_by_admin __

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x10c168310>
admin_client = <rest_framework.test.APIClient object at 0x10c18f640>
client = <django.test.client.Client object at 0x10c18f220>
django_user_model = <class 'users.models.User'>

    def test_get_confirmation_code_for_user_created_by_admin(
            self, admin_client, client, django_user_model
    ):
        user_cnt = django_user_model.objects.count()
        valid_data = {
            'email': 'test_email@yamdb.fake',
            'username': 'valid_username_1'
        }
        admin_client.post(self.url_admin_create_user, data=valid_data)
>       assert (user_cnt + 1) == django_user_model.objects.count(), (
            'Если POST-запрос администратора на эндпоинт '
            f'`{self.url_admin_create_user}` содержит корректные данные - '
            'должен быть создан новый пользователь.'
        )
E       AssertionError: Если POST-запрос администратора на эндпоинт `/api/v1/users/` содержит корректные данные - должен быть создан новый пользователь.
E       assert 2 == 1
E         +2
E         -1

tests/test_00_user_registration.py:364: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/users/
_______ Test01UserAPI.test_05_02_users_post_admin_user_creation[data0-] ________

self = <tests.test_01_users.Test01UserAPI object at 0x10bf008b0>
admin_client = <rest_framework.test.APIClient object at 0x10bed1c10>
data = {'email': 'testuser2@yamdb.fake', 'role': 'user', 'username': 'TestUser_2'}
msg_modifier = '', django_user_model = <class 'users.models.User'>

    @pytest.mark.parametrize('data,msg_modifier', VALID_DATA_FOR_USER_CREATION)
    def test_05_02_users_post_admin_user_creation(self, admin_client,
                                                  data, msg_modifier,
                                                  django_user_model):
        response = admin_client.post('/api/v1/users/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/users/` содержит '
            f'корректные данные {msg_modifier}- должен вернуться ответ со '
            'статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/users/` содержит корректные данные - должен вернуться ответ со статусом 201.
E       assert 400 == <HTTPStatus.CREATED: 201>
E         +400
E         -<HTTPStatus.CREATED: 201>

tests/test_01_users.py:206: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/users/
_ Test01UserAPI.test_05_02_users_post_admin_user_creation[data1-без указания роли нового пользователя ] _

self = <tests.test_01_users.Test01UserAPI object at 0x10c1df190>
admin_client = <rest_framework.test.APIClient object at 0x10bc5f850>
data = {'email': 'testuser3@yamdb.fake', 'username': 'TestUser_3'}
msg_modifier = 'без указания роли нового пользователя '
django_user_model = <class 'users.models.User'>

    @pytest.mark.parametrize('data,msg_modifier', VALID_DATA_FOR_USER_CREATION)
    def test_05_02_users_post_admin_user_creation(self, admin_client,
                                                  data, msg_modifier,
                                                  django_user_model):
        response = admin_client.post('/api/v1/users/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/users/` содержит '
            f'корректные данные {msg_modifier}- должен вернуться ответ со '
            'статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/users/` содержит корректные данные без указания роли нового пользователя - должен вернуться ответ со статусом 201.
E       assert 400 == <HTTPStatus.CREATED: 201>
E         +400
E         -<HTTPStatus.CREATED: 201>

tests/test_01_users.py:206: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/users/
____________ Test01UserAPI.test_05_03_users_post_response_has_data _____________

self = <tests.test_01_users.Test01UserAPI object at 0x10bc5f310>
admin_client = <rest_framework.test.APIClient object at 0x10bdeb2b0>

    def test_05_03_users_post_response_has_data(self, admin_client):
        data = {
            'first_name': 'First Name',
            'last_name': 'Last Name',
            'username': 'test_username',
            'bio': 'test bio',
            'role': 'moderator',
            'email': 'testmoder2@yamdb.fake'
        }
        response = admin_client.post('/api/v1/users/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/users/` '
            'содержит корректные данные - должен вернуться ответ со статусом '
            '201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/users/` содержит корректные данные - должен вернуться ответ со статусом 201.
E       assert 400 == <HTTPStatus.CREATED: 201>
E         +400
E         -<HTTPStatus.CREATED: 201>

tests/test_01_users.py:234: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/users/
______________ Test01UserAPI.test_05_04_users_post_user_superuser ______________

self = <tests.test_01_users.Test01UserAPI object at 0x10bdeb4f0>
user_superuser_client = <rest_framework.test.APIClient object at 0x10bcb10a0>
django_user_model = <class 'users.models.User'>

    def test_05_04_users_post_user_superuser(self, user_superuser_client,
                                             django_user_model):
        valid_data = {
            'username': 'TestUser_3',
            'role': 'user',
            'email': 'testuser3@yamdb.fake'
        }
        response = user_superuser_client.post(
            '/api/v1/users/', data=valid_data
        )
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос суперпользователя к `/api/v1/users/` '
            'содержит корректные данные - должен вернуться ответ со статусом '
            '201.'
        )
E       AssertionError: Если POST-запрос суперпользователя к `/api/v1/users/` содержит корректные данные - должен вернуться ответ со статусом 201.
E       assert 400 == <HTTPStatus.CREATED: 201>
E         +400
E         -<HTTPStatus.CREATED: 201>

tests/test_01_users.py:261: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/users/
=============================== warnings summary ===============================
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search
  /Users/evax/Documents/dev/edu/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'users.models.User'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ============================
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_get_new_confirmation_code_for_existing_user
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_get_confirmation_code_for_user_created_by_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_admin_user_creation[data0-]
FAILED tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_admin_user_creation[data1-без указания роли нового пользователя ]
FAILED tests/test_01_users.py::Test01UserAPI::test_05_03_users_post_response_has_data
FAILED tests/test_01_users.py::Test01UserAPI::test_05_04_users_post_user_superuser
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! KeyboardInterrupt !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
/Users/evax/Documents/dev/edu/api_yamdb/venv/lib/python3.9/site-packages/django/utils/crypto.py:87: KeyboardInterrupt
(to show a full traceback on KeyboardInterrupt use --full-trace)
================== 10 failed, 22 passed, 2 warnings in 8.69s ===================
